// Generated by CoffeeScript 1.12.7
(function() {
  var Q, Qdenodify, _clientEmitScript, app, appRoute, browserify, chalk, childProcess, clientDir, clientEmitScript, clientLoc, clientQ, coffee, execQ, fs, io, isUtils, pathHelpers, readDirQ, readFile, readFileQ, server, serverDir, serverEmitScript, serverLoc, socketIO, statQ, utils,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  coffee = require("coffee-script");

  fs = require("fs");

  pathHelpers = require("path");

  childProcess = require("child_process");

  socketIO = require("socket.io");

  chalk = require("chalk");

  utils = require("./utils");

  global.__SERVER_utils_data = utils._data;

  clientDir = "../client";

  clientLoc = clientDir + "/index.coffee";

  serverDir = "../server";

  serverLoc = serverDir + "/index.coffee";

  Q = utils.Q, Qdenodify = utils.Qdenodify, server = utils.server, app = utils.app;

  io = socketIO(server);

  readFile = Qdenodify(fs, fs.readFile);

  readDirQ = Qdenodify(fs, fs.readdir);

  readFileQ = Qdenodify(fs, fs.readFile);

  statQ = Qdenodify(fs, fs.stat);

  execQ = Qdenodify(childProcess, childProcess.exec);

  browserify = function(loc, emitScript) {
    var Qall, awesomify, bundleQ, checkFiles, isCoffee, loadQ, rebundle, resolved;
    Qall = function(ps) {
      var fn, j, len1, p, result;
      result = Q([]);
      fn = function(p) {
        return result = result.then(function(arr) {
          return p.then(function(v) {
            return arr.concat([v]);
          })["catch"](function(e) {
            return arr.concat([
              {
                err: e
              }
            ]);
          });
        });
      };
      for (j = 0, len1 = ps.length; j < len1; j++) {
        p = ps[j];
        fn(p);
      }
      return result;
    };
    isCoffee = function(path) {
      return path.indexOf(".coffee") === path.length - ".coffee".length;
    };
    awesomify = function(srcPath) {
      var dir;
      dir = pathHelpers.resolve(pathHelpers.dirname(srcPath));
      return readFileQ(srcPath).then(function(src) {
        var dependenciesQ, i, len, path, regex, req, shouldBeEscaped;
        src = src.toString("utf8");
        if (isCoffee(srcPath)) {
          src = coffee.compile(src, {
            bare: true
          });
        }
        i = 0;
        regex = /require *\( *['"][-_.\/0-9a-zA-Z]*['"] *\)/g;
        dependenciesQ = (function() {
          var ref, ref1, results;
          results = [];
          while (req = regex.exec(src)) {
            path = req[0];
            len = path.length;
            path = path.substr(7).trim();
            shouldBeEscaped = [" ", "(", ")", '"', "'"];
            while (ref = path.charAt(0), indexOf.call(shouldBeEscaped, ref) >= 0) {
              path = path.substr(1);
            }
            while (ref1 = path.charAt(path.length - 1), indexOf.call(shouldBeEscaped, ref1) >= 0) {
              path = path.substr(0, path.length - 1);
            }
            results.push((function(path, req, len) {
              var isWindows;
              isWindows = process.env.OS === "Windows_NT";
              return execQ((isWindows ? "cd " + dir + " && coffee -e \"console.log require.resolve '" + path + "'\"" : "cd " + dir + " ; coffee -e \"console.log require.resolve '" + path + "'\"")).then(function(arg) {
                var _, out;
                out = arg[0], _ = arg[1];
                if (!((out != null) && out.charAt(0).toLowerCase() === (isWindows ? __dirname.charAt(0).toLowerCase() : '/'))) {
                  throw "'" + path + "' not resolved";
                }
                return {
                  from: req.index,
                  to: req.index + len,
                  path: out.substr(0, out.length - 1)
                };
              });
            })(path, req, len));
          }
          return results;
        })();
        return Qall(dependenciesQ).then(function(dependencies) {
          return {
            dependencies: dependencies,
            src: src
          };
        });
      });
    };
    resolved = {};
    loadQ = function(path) {
      var index;
      if (resolved[path] != null) {
        if (resolved[path].loading) {
          return Q();
        } else {
          resolved[path].loading = true;
        }
      } else {
        index = Object.keys(resolved).length;
        resolved[path] = {
          index: index,
          path: path,
          loading: true
        };
      }
      resolved[path].compiledCodeChanged = false;
      return awesomify(path).then(function(result) {
        var dependency, fn, j, len1, offset, ref, sequenceQ, src;
        resolved[path].time = new Date().getTime();
        src = result.src;
        offset = 0;
        sequenceQ = Q();
        ref = result.dependencies;
        fn = function(dependency) {
          return sequenceQ = sequenceQ.then(function() {
            return loadQ(dependency.path);
          }).then(function() {
            var newReq;
            newReq = "__req__(" + resolved[dependency.path].index + ")";
            src = src.slice(0, dependency.from + offset) + newReq + src.slice(dependency.to + offset);
            return offset += newReq.length - (dependency.to - dependency.from);
          });
        };
        for (j = 0, len1 = ref.length; j < len1; j++) {
          dependency = ref[j];
          if (dependency.err) {
            console.log("Error", dependency.err);
            continue;
          }
          fn(dependency);
        }
        return sequenceQ.then(function() {
          var script;
          console.log(chalk.green("loaded file: " + path));
          script = resolved[path];
          script.compiledCodeChanged = script.src !== src;
          if (script.compiledCodeChanged) {
            script.src = src;
            return typeof emitScript === "function" ? emitScript({
              index: script.index,
              code: script.src,
              path: path
            }) : void 0;
          }
        });
      })["catch"](function(err) {
        var ref;
        if ((ref = resolved[path]) != null) {
          ref.time = new Date().getTime();
        }
        delete err.code;
        return console.log("Error in file:", path, '\n', err);
      });
    };
    bundleQ = loadQ(loc);
    (rebundle = function() {
      return bundleQ = bundleQ.then(function() {
        var k, resolvedArr;
        resolvedArr = (function() {
          var j, len1, ref, results;
          ref = Object.keys(resolved);
          results = [];
          for (j = 0, len1 = ref.length; j < len1; j++) {
            k = ref[j];
            results.push(resolved[k]);
          }
          return results;
        })();
        resolvedArr = resolvedArr.sort(function(a, b) {
          return a.index - b.index;
        });
        return resolvedArr.map(function(r) {
          var ref;
          return {
            src: (ref = r.src) != null ? ref : '',
            path: r.path
          };
        });
      });
    })();
    (checkFiles = function() {
      var fn, j, k, len1, r, resolvedArr, sequenceQ;
      resolvedArr = (function() {
        var j, len1, ref, results;
        ref = Object.keys(resolved);
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          k = ref[j];
          results.push(resolved[k]);
        }
        return results;
      })();
      resolvedArr = resolvedArr.sort(function(a, b) {
        return a.index - b.index;
      });
      sequenceQ = Q();
      fn = function(r) {
        return sequenceQ = sequenceQ.then(function() {
          return statQ(r.path);
        }).then(function(stat) {
          if (stat.mtime.getTime() > r.time) {
            console.log("\u001B[2J\u001B[0;0f");
            resolved[r.path].loading = false;
            return loadQ(r.path).then(function() {
              if (resolved[r.path].compiledCodeChanged) {
                return rebundle();
              }
            });
          }
        });
      };
      for (j = 0, len1 = resolvedArr.length; j < len1; j++) {
        r = resolvedArr[j];
        fn(r);
      }
      return sequenceQ.then(function() {
        return setTimeout(checkFiles);
      });
    })();
    return function() {
      return bundleQ;
    };
  };

  console.log("\u001B[2J\u001B[0;0f");

  isUtils = function(path) {
    return path.indexOf("utils.coffee") === path.length - "utils.coffee".length;
  };

  serverEmitScript = function(script) {
    var ev;
    ev = eval;
    return ev("if (typeof(global.__SERVER_module_defenitions) !== 'undefined' && typeof(global.__SERVER_load) === 'function') { var defenition = function(__req__, module, exports){" + script.code + "}; " + (isUtils(script.path) ? "defenition.isUtils = true;" : "") + " global.__SERVER_module_defenitions[" + script.index + "] = defenition; global.__SERVER_load(" + script.index + "); }");
  };

  browserify(serverLoc, serverEmitScript)().then(function(srcs) {
    var browserified, ev;
    browserified = "var loadedModules = {}; global.__SERVER_load = function(num) { var module; if (loadedModules[num]) { module = loadedModules[num]; } else { module = loadedModules[num] = { dynamic: true, exports: {} }; } var defenition = global.__SERVER_module_defenitions[num]; if (defenition.isUtils) module._data = global.__SERVER_utils_data; defenition((function(num) { if (loadedModules[num]) return loadedModules[num].exports; else return global.__SERVER_load(num).exports; }), module, module.exports); return module; }; global.__SERVER_module_defenitions = []; var defenition; " + (srcs.map(function(r) {
      return "defenition = function(__req__, module, exports){" + r.src + "}; " + (isUtils(r.path) ? "defenition.isUtils = true;" : "") + " global.__SERVER_module_defenitions.push(defenition);";
    }).join('')) + " global.__SERVER_load(0);";
    ev = eval;
    return ev(browserified);
  });

  _clientEmitScript = function() {};

  clientEmitScript = function(script) {
    return _clientEmitScript(script);
  };

  io.on("connection", function(socket) {
    return _clientEmitScript = function(script) {};
  });

  clientQ = browserify(clientLoc, clientEmitScript);

  app.get("/scripts.js", function(req, res) {
    return clientQ().then(function(srcs) {
      return res.send("var loadedModules = {}; var load = function(num) { var module; if (loadedModules[num]) { module = loadedModules[num]; } else { module = loadedModules[num] = { dynamic: true, exports: {} }; } var defenition = moduleDefenitions[num]; defenition((function(num) { if (loadedModules[num]) return loadedModules[num].exports; else return load(num).exports; }), module, module.exports); return module; }; var moduleDefenitions = []; var defenition; " + (srcs.map(function(r) {
        return "defenition = function(__req__, module, exports){" + r.src + "}; moduleDefenitions.push(defenition);";
      }).join("")) + " load(0);");
    });
  });

  appRoute = app._router.stack.filter(function(x) {
    var ref;
    return ((ref = x.route) != null ? ref.path : void 0) === '/';
  });

  appRoute = appRoute[0];

  app._router.stack.splice(app._router.stack.indexOf(appRoute), 1);

  app.get('/', function(req, res) {
    return res.send('<!doctype html> <html> <head> <title></title> <script src="assets/lib/shim.js"></script> <script src="assets/lib/sham.js"></script> <script src="assets/lib/platform.js"></script> <script src="assets/lib/jquery.js"></script> <script src="assets/lib/bootstrap.js"></script> </head> <body> <script src="scripts.js"></script> </body> </html>');
  });

}).call(this);
