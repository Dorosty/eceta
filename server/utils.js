// Generated by CoffeeScript 1.12.7
(function() {
  var Q, Qdenodify, app, bodyParser, clientDir, clientLoc, configResponse, convert, cookieParser, createSqlUtility, crypto, dbPool, dbPoolConnect, express, extend, fs, handle, http, jwt, jwtOptions, jwtSecret, logStream, nodemailer, onExit, pg, ref, req, request, server, sqlNameCache, toPersian, xlsx,
    slice = [].slice;

  if (!module.dynamic) {
    clientDir = '../client';
    clientLoc = clientDir + '/index.coffee';
    req = require;
    Q = req('q');
    http = req('http');
    express = req('express');
    bodyParser = req('body-parser');
    cookieParser = req('cookie-parser');
    pg = req('pg');
    jwt = req('jsonwebtoken');
    crypto = req('crypto');
    nodemailer = req('nodemailer');
    fs = req('fs');
    request = req('request');
    xlsx = req('node-xlsx');
    Q.longStackSupport = true;
    app = express();
    app.use(bodyParser.json());
    app.use(cookieParser());
    server = http.Server(app);
    server.listen(80);
    app.use('/assets', express["static"](clientDir + '/assets/'));
    app.get('/', function(req, res) {
      return res.send('<!doctype html> <html> <head> <title></title> <script src="assets/lib/shim.js"></script> <script src="assets/lib/sham.js"></script> <script src="assets/lib/platform.js"></script> <script src="assets/lib/jquery.js"></script> <script src="assets/lib/bootstrap.js"></script> </head> <body> <script src="assets/scripts.js"></script> </body> </html>');
    });
    exports._data = {
      Q: Q,
      http: http,
      express: express,
      bodyParser: bodyParser,
      cookieParser: cookieParser,
      pg: pg,
      jwt: jwt,
      crypto: crypto,
      nodemailer: nodemailer,
      xlsx: xlsx,
      fs: fs,
      request: request,
      app: app
    };
  } else {
    ref = module._data, Q = ref.Q, http = ref.http, express = ref.express, bodyParser = ref.bodyParser, cookieParser = ref.cookieParser, pg = ref.pg, jwt = ref.jwt, crypto = ref.crypto, nodemailer = ref.nodemailer, xlsx = ref.xlsx, fs = ref.fs, request = ref.request, app = ref.app;
  }

  exports.Q = Q;

  exports.all = function(promises) {
    promises = promises.map(function(promise) {
      return promise != null ? typeof promise["catch"] === "function" ? promise["catch"](function(e) {
        return {
          error: e
        };
      }) : void 0 : void 0;
    });
    return Q.all(promises).then(function(results) {
      var error;
      error = void 0;
      if (results.some(function(result) {
        return error = result != null ? result.error : void 0;
      })) {
        throw error;
      } else {
        return results;
      }
    });
  };

  exports.server = server;

  exports.app = app;

  convert = exports.convert = {
    stringTypeToNumberType: function(person) {
      var type;
      type = (function() {
        switch (person.type) {
          case 'کارشناس آموزش':
            return 0;
          case 'استاد':
            return 1;
          case 'دانشجو':
            return 2;
          case 'نماینده استاد':
            return 3;
          default:
            return null;
        }
      })();
      return extend(person, {
        type: type
      });
    },
    nubmerTypeToStringType: function(person) {
      var type;
      type = (function() {
        switch (+person.type) {
          case 0:
            return 'کارشناس آموزش';
          case 1:
            return 'استاد';
          case 2:
            return 'دانشجو';
          case 3:
            return 'نماینده استاد';
          default:
            return null;
        }
      })();
      return extend(person, {
        type: type
      });
    },
    stringDegreeToNumberDegree: function(person) {
      var degree;
      degree = (function() {
        switch (person.degree) {
          case 'کارشناسی':
            return 0;
          case 'کارشناسی ارشد':
            return 1;
          case 'دکتری':
            return 2;
          default:
            return null;
        }
      })();
      return extend(person, {
        degree: degree
      });
    },
    numberDegreeToStringDegree: function(person) {
      var degree;
      degree = (function() {
        switch (+person.degree) {
          case 0:
            return 'کارشناسی';
          case 1:
            return 'کارشناسی ارشد';
          case 2:
            return 'دکتری';
          default:
            return null;
        }
      })();
      if (person.degree == null) {
        degree = null;
      }
      return extend(person, {
        degree: degree
      });
    },
    numberStatusToStringStatus: function(requestForAssistant) {
      var status;
      status = (function() {
        switch (+requestForAssistant.status) {
          case 0:
            return 'در حال بررسی';
          case 1:
            return 'رد شده';
          case 2:
            return 'تایید شده';
        }
      })();
      return extend(requestForAssistant, {
        status: status
      });
    },
    stringStatusToNumberStatus: function(requestForAssistant) {
      var status;
      status = (function() {
        switch (requestForAssistant.status) {
          case 'در حال بررسی':
            return 0;
          case 'رد شده':
            return 1;
          case 'تایید شده':
            return 2;
        }
      })();
      return extend(requestForAssistant, {
        status: status
      });
    }
  };

  exports.hash = function(str) {
    var shasum;
    shasum = crypto.createHash('sha1');
    return shasum.update(str).digest('hex');
  };

  toPersian = exports.toPersian = function(value) {
    value = '' + value;
    '۰۱۲۳۴۵۶۷۸۹'.split('').forEach(function(digit, i) {
      return value = value.replace(new RegExp('' + i, 'g'), digit);
    });
    return value.replace(/ي/g, 'ی').replace(/ك/g, 'ک');
  };

  exports.sendMail = function(email, subject, text, name, html) {
    var mailServer, message;
    name = toPersian(name);
    subject = toPersian(subject);
    if (name == null) {
      name = email;
    }
    mailServer = nodemailer.createTransport({
      host: 'mail.ut.ac.ir',
      auth: {
        user: 'ma.dorosty',
        pass: 'Ma19Md93M'
      }
    });
    message = {
      from: 'سامانه مدیریت دستیاران آموزشی <ma.dorosty@ut.ac.ir>',
      to: name + " <" + email + ">",
      subject: subject,
      text: text
    };
    if (html != null) {
      message.html = "<div dir=\"rtl\">" + html + "</div>";
    }
    return (Qdenodify(mailServer, mailServer.sendMail))(message);
  };

  exports.randomString = function(stringLength) {
    var chars, i, l, ref1, res, rnum;
    chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    res = '';
    for (i = l = 1, ref1 = stringLength; 1 <= ref1 ? l <= ref1 : l >= ref1; i = 1 <= ref1 ? ++l : --l) {
      rnum = Math.floor(Math.random() * chars.length);
      res += chars.substring(rnum, rnum + 1);
    }
    return res;
  };

  exports.jalaali = (function() {
    var d2g, d2j, div, g2d, isLeapJalaaliYear, isValidJalaaliDate, j2d, jalCal, jalaaliMonthLength, mod, toGregorian, toJalaali;
    toJalaali = function(gy, gm, gd) {
      return d2j(g2d(gy, gm, gd));
    };
    toGregorian = function(jy, jm, jd) {
      return d2g(j2d(jy, jm, jd));
    };
    isValidJalaaliDate = function(jy, jm, jd) {
      return jy >= -61 && jy <= 3177 && jm >= 1 && jm <= 12 && jd >= 1 && jd <= jalaaliMonthLength(jy, jm);
    };
    isLeapJalaaliYear = function(jy) {
      return jalCal(jy).leap === 0;
    };
    jalaaliMonthLength = function(jy, jm) {
      if (jm <= 6) {
        return 31;
      }
      if (jm <= 11) {
        return 30;
      }
      if (isLeapJalaaliYear(jy)) {
        return 30;
      }
      return 29;
    };
    jalCal = function(jy) {
      var bl, breaks, gy, i, jm, jp, jump, leap, leapG, leapJ, march, n;
      breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178];
      bl = breaks.length;
      gy = jy + 621;
      leapJ = -14;
      jp = breaks[0];
      jm = jump = leap = leapG = march = n = i = null;
      if (jy < jp || jy >= breaks[bl - 1]) {
        throw new Error('Invalid Jalaali year ' + jy);
      }
      i = 1;
      while (i < bl) {
        jm = breaks[i];
        jump = jm - jp;
        if (jy < jm) {
          break;
        }
        leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4);
        jp = jm;
        i += 1;
      }
      n = jy - jp;
      leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4);
      if (mod(jump, 33) === 4 && jump - n === 4) {
        leapJ += 1;
      }
      leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150;
      march = 20 + leapJ - leapG;
      if (jump - n < 6) {
        n = n - jump + div(jump + 4, 33) * 33;
      }
      leap = mod(mod(n + 1, 33) - 1, 4);
      if (leap === -1) {
        leap = 4;
      }
      return {
        leap: leap,
        gy: gy,
        march: march
      };
    };
    j2d = function(jy, jm, jd) {
      var r;
      r = jalCal(jy);
      return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1;
    };
    d2j = function(jdn) {
      var gy, jd, jdn1f, jm, jy, k, r;
      gy = d2g(jdn).gy;
      jy = gy - 621;
      r = jalCal(jy);
      jdn1f = g2d(gy, 3, r.march);
      jd = jm = k = null;
      k = jdn - jdn1f;
      if (k >= 0) {
        if (k <= 185) {
          jm = 1 + div(k, 31);
          jd = mod(k, 31) + 1;
          return {
            jy: jy,
            jm: jm,
            jd: jd
          };
        } else {
          k -= 186;
        }
      } else {
        jy -= 1;
        k += 179;
        if (r.leap === 1) {
          k += 1;
        }
      }
      jm = 7 + div(k, 30);
      jd = mod(k, 30) + 1;
      return {
        jy: jy,
        jm: jm,
        jd: jd
      };
    };
    g2d = function(gy, gm, gd) {
      var d;
      d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod(gm + 9, 12) + 2, 5) + gd - 34840408;
      d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;
      return d;
    };
    d2g = function(jdn) {
      var gd, gm, gy, i, j;
      j = 4 * jdn + 139361631;
      j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;
      i = div(mod(j, 1461), 4) * 5 + 308;
      gd = div(mod(i, 153), 5) + 1;
      gm = mod(div(i, 153), 12) + 1;
      gy = div(j, 1461) - 100100 + div(8 - gm, 6);
      return {
        gy: gy,
        gm: gm,
        gd: gd
      };
    };
    div = function(a, b) {
      return ~~(a / b);
    };
    mod = function(a, b) {
      return a - ~~(a / b) * b;
    };
    return {
      toJalaali: toJalaali,
      toGregorian: toGregorian,
      isValidJalaaliDate: isValidJalaaliDate,
      isLeapJalaaliYear: isLeapJalaaliYear,
      jalaaliMonthLength: jalaaliMonthLength,
      jalCal: jalCal,
      j2d: j2d,
      d2j: d2j,
      g2d: g2d,
      d2g: d2g
    };
  })();

  extend = exports.extend = function() {
    var sources, target;
    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    sources.forEach(function(source) {
      return Object.keys(source).forEach(function(key) {
        var value;
        value = source[key];
        if (key !== 'except') {
          return target[key] = value;
        } else {
          if (Array.isArray(value)) {
            return value.forEach(function(k) {
              return delete target[k];
            });
          } else if (typeof value === 'object') {
            return Object.keys(value).forEach(function(k) {
              return delete target[k];
            });
          } else {
            return delete target[value];
          }
        }
      });
    });
    return target;
  };

  Qdenodify = exports.Qdenodify = function(owner, fn) {
    return function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return Q.promise(function(resolve, reject) {
        var err;
        args.push(function() {
          var err, results;
          err = arguments[0], results = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          if (err != null) {
            return reject(err);
          } else if (results.length === 0) {
            return resolve(void 0);
          } else if (results.length === 1) {
            return resolve(results[0]);
          } else {
            return resolve(results);
          }
        });
        try {
          return fn.apply(owner, args);
        } catch (error1) {
          err = error1;
          return reject(err);
        }
      });
    };
  };

  exports.readFile = Qdenodify(fs, fs.readFile);

  exports.requestGet = Qdenodify(request, request.get);

  sqlNameCache = (function() {
    var generateName, id, queryNames;
    queryNames = {};
    id = 0;
    generateName = function() {
      return 'query' + (id++);
    };
    return function(query) {
      if (queryNames[query] == null) {
        queryNames[query] = generateName();
      }
      return queryNames[query];
    };
  })();

  createSqlUtility = function(client) {
    var finalizeQuery, getReturnObject, normalizePredicate, objectifyArray, select, sendQuery, sql;
    sql = Qdenodify(client, client.query);
    sendQuery = function(query, values) {
      return sql({
        name: sqlNameCache(query),
        text: query,
        values: values
      });
    };
    normalizePredicate = function(predicate) {
      var fields, query, values;
      if (predicate == null) {
        return null;
      }
      if (typeof predicate === 'string') {
        return {
          query: predicate,
          values: []
        };
      }
      if (typeof predicate.query === 'string') {
        if (!((predicate.values != null) && Array.isArray(predicate.values))) {
          predicate.values = [];
        }
        return predicate;
      }
      fields = Object.keys(predicate);
      values = fields.map(function(field) {
        return predicate[field];
      });
      query = fields.map(function(field, i) {
        return "\"" + field + "\" = %";
      }).join(' AND ');
      return {
        query: query,
        values: values
      };
    };
    objectifyArray = function(x) {
      if (Array.isArray(x)) {
        return x.reduce((function(result, y) {
          result[y] = y;
          return result;
        }), {});
      } else {
        return x;
      }
    };
    finalizeQuery = function(query, values) {
      values.forEach(function(_, i) {
        var index, placeholder;
        placeholder = "$" + (i + 1);
        index = query.indexOf('%');
        if (!~query.indexOf(placeholder) && ~index) {
          return query = query.substr(0, index) + placeholder + query.substr(index + 1);
        }
      });
      return query;
    };
    getReturnObject = function(query, values, field) {
      var deferred, finalizedQuery, promise, timeout;
      finalizedQuery = finalizeQuery(query, values);
      deferred = Q.defer();
      timeout = setTimeout(function() {
        return sendQuery(finalizedQuery, values).then((function(arg) {
          var ref1, rows;
          rows = arg.rows;
          if (field != null) {
            return deferred.resolve((ref1 = rows[0]) != null ? ref1[field] : void 0);
          } else {
            return deferred.resolve(rows);
          }
        }), deferred.reject);
      });
      promise = deferred.promise;
      promise.unsend = function() {
        clearTimeout(timeout);
        return deferred.resolve(null);
      };
      Object.defineProperty(promise, 'query', {
        get: function() {
          promise.unsend();
          return query;
        }
      });
      Object.defineProperty(promise, 'finalizedQuery', {
        get: function() {
          promise.unsend();
          return finalizedQuery;
        }
      });
      Object.defineProperty(promise, 'values', {
        get: function() {
          promise.unsend();
          return values;
        }
      });
      return promise;
    };
    return {
      insert: function(entity, data, returnId) {
        var fields, query, values;
        if (returnId == null) {
          returnId = false;
        }
        fields = Object.keys(data);
        values = fields.map(function(field) {
          return data[field];
        });
        query = "INSERT INTO \"" + entity + "\" (\"createdAt\" " + (fields.length ? ',' : '') + " " + (fields.map(function(field) {
          return '"' + field + '"';
        }).join(', ')) + ") VALUES (NOW() " + (values.length ? ',' : '') + " " + ((values.map(function() {
          return '%';
        })).join(', ')) + ")";
        if (returnId) {
          query += " RETURNING \"id\"";
        }
        return getReturnObject(query, values, 'id');
      },
      update: function(entity, data, predicate, returning) {
        var fields, query, values;
        predicate = normalizePredicate(predicate);
        returning = objectifyArray(returning);
        fields = Object.keys(data);
        values = (fields.map(function(field) {
          return data[field];
        })).concat(predicate.values);
        query = "UPDATE \"" + entity + "\" SET \"updatedAt\" = NOW(), " + ((fields.map(function(field) {
          return '"' + field + '"' + ' = %';
        })).join(', ')) + " WHERE " + predicate.query;
        if (returning != null) {
          if (typeof returning === 'string') {
            returning = "\"" + returning + "\"";
          } else {
            returning = (Object.keys(returning).map(function(r) {
              return "\"" + returning[r] + "\" AS \"" + r + "\"";
            })).join(', ');
          }
          query += " RETURNING " + returning;
        }
        return getReturnObject(query, values);
      },
      "delete": function(entity, predicate, returning) {
        var query;
        predicate = normalizePredicate(predicate);
        returning = objectifyArray(returning);
        query = "UPDATE \"" + entity + "\" SET \"deletedAt\" = NOW() WHERE " + predicate.query;
        query = "DELETE FROM \"" + entity + "\" WHERE " + predicate.query;
        if (returning != null) {
          if (typeof returning === 'string') {
            returning = "\"" + returning + "\"";
          } else {
            returning = (Object.keys(returning).map(function(r) {
              return "\"" + returning[r] + "\" AS \"" + r + "\"";
            })).join(', ');
          }
          query += " RETURNING " + returning;
        }
        return getReturnObject(query, predicate.values);
      },
      select: select = function(entities, fieldss, predicate) {
        var allFields, query, values;
        predicate = normalizePredicate(predicate);
        if (!Array.isArray(entities)) {
          entities = [entities];
          fieldss = [fieldss];
        }
        allFields = entities.map(function(_, i) {
          var fields;
          fields = fieldss[i];
          if (fields == null) {
            return null;
          }
          fields = objectifyArray(fields);
          if (typeof fields === 'string') {
            if (fields !== '*') {
              fields = "x" + i + ".\"" + fields + "\" AS \"" + fields + "\"";
            } else {
              fields = "x" + i + ".*";
            }
          } else {
            fields = Object.keys(fields).map(function(field) {
              return "x" + i + ".\"" + fields[field] + "\" AS \"" + field + "\"";
            }).join(', ');
          }
          return fields;
        }).filter(function(fields) {
          return fields != null;
        }).join(', ');
        query = "SELECT " + allFields + " FROM " + ((entities.map(function(entity, i) {
          return '"' + entity + '" x' + i;
        })).join(', '));
        if (predicate != null) {
          query += " WHERE " + predicate.query;
          values = predicate.values;
        } else {
          values = [];
        }
        return getReturnObject(query, values);
      },
      count: function(entity, predicate) {
        var query, values;
        predicate = normalizePredicate(predicate);
        values = predicate.values;
        query = "SELECT COUNT(*) AS cnt FROM \"" + entity + "\" WHERE " + predicate.query;
        return getReturnObject(query, values, 'cnt');
      },
      exists: function(entities, predicate) {
        var query, ref1, values;
        if (!Array.isArray(entities)) {
          entities = [entities];
        }
        ref1 = select(entities, entities.map(function() {
          return '*';
        }), predicate), query = ref1.query, values = ref1.values;
        query = "SELECT EXISTS(" + query + ") AS ex";
        return getReturnObject(query, values, 'ex');
      },
      query: function(query, values) {
        if (!Array.isArray(values)) {
          values = [];
        }
        return sendQuery(query, values);
      }
    };
  };

  dbPool = new pg.Pool({
    user: 'dombak',
    database: 'dombak',
    password: 'dombak123',
    port: 5432,
    max: 10,
    idleTimeoutMillis: 30000
  });

  dbPoolConnect = Qdenodify(dbPool, dbPool.connect);

  jwtSecret = '123456dombakVeryVerySecretKey123456';

  jwtOptions = {
    expiresIn: 60 * 60
  };

  logStream = fs.createWriteStream('log.txt', {
    flags: 'a'
  });

  onExit = function() {
    logStream.end();
    return process.exit();
  };

  process.on('exit', onExit);

  process.on('SIGINT', onExit);

  process.on('uncaughtException', onExit);

  configResponse = void 0;

  handle = function(methodName) {
    return function(route, handler) {
      var appRoute;
      route = '/' + route;
      appRoute = app._router.stack.filter(function(x) {
        var ref1;
        return ((ref1 = x.route) != null ? ref1.path : void 0) === route;
      });
      if (appRoute.length > 0) {
        appRoute = appRoute[0];
        app._router.stack.splice(app._router.stack.indexOf(appRoute), 1);
      }
      return app[methodName](route, function(req, res) {
        var logBody;
        logBody = extend({}, req.body);
        if (logBody.password) {
          logBody.password = '[[PASSWORD]]';
        }
        delete req.query.rand;
        extend(req.body, req.query);
        return dbPoolConnect().then(function(arg) {
          var client, done, query, sql;
          client = arg[0], done = arg[1];
          sql = createSqlUtility(client);
          query = Qdenodify(client, client.query);
          return query('BEGIN').then(function() {
            var data, personId;
            try {
              personId = jwt.verify(req.cookies.id, jwtSecret).personId;
              extend(personId, {
                except: ['iat', 'exp']
              });
              extend(req, {
                personId: personId
              });
            } catch (error1) {
              req.loggedOut = true;
            }
            try {
              data = jwt.verify(req.cookies.data, jwtSecret).data;
              extend(data, {
                except: ['iat', 'exp']
              });
              extend(req, {
                data: data
              });
            } catch (error1) {}
            return handler(sql, req);
          }).then(function(response) {
            var data, personId;
            if (response == null) {
              response = {};
            }
            if (Array.isArray(response) || typeof response !== 'object') {
              response = {
                value: response
              };
            }
            if (response.setPersonId) {
              personId = response.setPersonId;
            } else if (req.personId) {
              personId = req.personId;
            } else if (req.loggedOut) {
              response.loggedOut = true;
            }
            delete response.setPersonId;
            if (response.setData) {
              data = response.setData;
            } else if (req.data) {
              data = req.data;
            } else {
              data = {};
            }
            delete response.setData;
            if (personId) {
              res.cookie('id', jwt.sign({
                personId: personId
              }, jwtSecret, jwtOptions));
            }
            if (data) {
              res.cookie('data', jwt.sign({
                data: data
              }, jwtSecret, jwtOptions));
            }
            return Q(configResponse(methodName, personId, response, sql, req)).then(function() {
              return response;
            });
          }).then(function(response) {
            return query(response.error ? 'ROLLBACK' : 'COMMIT').then(function() {
              var logResponse;
              done();
              if (response.xlsx) {
                setTimeout(function() {
                  res.set('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
                  return res.send(xlsx.build([
                    {
                      name: 'sheet',
                      data: response.xlsx
                    }
                  ]));
                });
              } else {
                res.json(response);
              }
              logResponse = extend({}, response);
              Object.keys(logResponse).forEach(function(key) {
                if (Array.isArray(logResponse[key])) {
                  return logResponse[key] = "[" + logResponse[key].length + " items]";
                }
              });
              delete logResponse.xlsx;
              return logStream.write((new Date()) + "\n" + route + "\n" + (JSON.stringify(logBody)) + "\n" + (JSON.stringify(logResponse)) + "\n\n\n");
            });
          })["catch"](function(error) {
            return query('ROLLBACK').then(function() {
              done();
              res.status(400).send((error != null ? error.error : void 0) ? error.error : '');
              logStream.write("ERROR: " + (new Date()) + "\n" + route + "\n" + (JSON.stringify(logBody)) + "\n" + error + "\n\n");
              try {
                return logStream.write("ERROR: " + (new Date()) + "\n" + route + "\n" + (JSON.stringify(logBody)) + "\n" + (JSON.stringify(error)) + "\n\n\n");
              } catch (error1) {}
            });
          });
        });
      });
    };
  };

  exports.config = function(x) {
    return configResponse = x;
  };

  exports.get = handle('get');

  exports.post = handle('post');

}).call(this);
