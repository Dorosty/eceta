// Generated by CoffeeScript 1.12.7
(function() {
  var Q, all, config, convert, extend, get, getChores, getCourses, getCurrentTerm, getOfferings, getPermissions, getPerson, getPersons, getProfessorOfferings, getProfessors, getRequestForAssistants, getRoles, getStudentRequestForAssistants, hash, jalaali, post, randomString, readFile, ref, requestGet, sendEmail, sendMail, sendOfferingCoursesChangedEmail, toPersian,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require('./utils'), config = ref.config, get = ref.get, post = ref.post, requestGet = ref.requestGet, Q = ref.Q, readFile = ref.readFile, hash = ref.hash, sendMail = ref.sendMail, extend = ref.extend, randomString = ref.randomString, jalaali = ref.jalaali, convert = ref.convert, all = ref.all, toPersian = ref.toPersian;

  post('reportBug', function(sql, req) {
    var description, person, platform, ref1;
    ref1 = req.body, description = ref1.description, platform = ref1.platform, person = ref1.person;
    sendMail('ma.dorosty@gmail.com', 'گزارش خطا', description + "\n\n\n" + person + "\n\n\n" + platform, 'Ali Dorosty');
    return null;
  });

  sendEmail = function(email, name) {
    return {
      register: function(email, verificationCode) {
        var link;
        link = "http://eceta.ut.ac.ir?email=" + email + "&verificationCode=" + verificationCode;
        sendMail(email, 'تایید عضویت', "کاربر گرامی،\n \n با سلام\n \n ضمن تشکر از اقدام برای عضویت در سامانه مدیریت دستیاران آموزشی، خواهشمند است با کلیک روی پیوند زیر عضویت خود را در این سامانه تایید نمایید.\n " + link + "\n \n سامانه مدیریت دستیاران آموزشی\n دانشکده مهندسی برق و کامپیوتر\n http://eceta.ut.ac.ir", name, "کاربر گرامی،<br /> <br /> با سلام <br /> ضمن تشکر از اقدام برای عضویت در سامانه مدیریت دستیاران آموزشی، خواهشمند است با کلیک روی پیوند زیر عضویت خود را در این سامانه تایید نمایید.<br /> <a href=\"" + link + "\">" + link + "</a><br /> <br /> سامانه مدیریت دستیاران آموزشی<br /> دانشکده مهندسی برق و کامپیوتر<br /> <a href=\"http://eceta.ut.ac.ir\">http://eceta.ut.ac.ir</a>");
        return null;
      },
      requestForAssistantSent: function(courseName) {
        sendMail(email, 'درخواست دستیاری با موفقیت ارسال شد', "دانشجوی گرامی،\n \n با سلام\n \n درخواست شما برای دستیاری در درس «" + (toPersian(courseName)) + "» با موفقیت ارسال شد.\n \n سامانه مدیریت دستیاران آموزشی\n دانشکده مهندسی برق و کامپیوتر\n http://eceta.ut.ac.ir", name, "دانشجوی گرامی،<br /> <br /> با سلام<br /> <br /> درخواست شما برای دستیاری در درس «" + (toPersian(courseName)) + "» با موفقیت ارسال شد.<br /> <br /> سامانه مدیریت دستیاران آموزشی<br /> دانشکده مهندسی برق و کامپیوتر<br /> <a href=\"http://eceta.ut.ac.ir\">http://eceta.ut.ac.ir</a>");
        return null;
      },
      offeringCoursesChanged: function(courseName) {
        sendMail(email, 'تغییر لیست دروس مورد نیاز', "دانشجوی گرامی،\n \n با سلام\n \n لیست درس‌های مورد نیاز برای درس «" + (toPersian(courseName)) + "» تغییر کرده است. لطفا در اسرع وقت درخواست خود را ویرایش کنید.\n \n سامانه مدیریت دستیاران آموزشی\n دانشکده مهندسی برق و کامپیوتر\n <a href=\"http://eceta.ut.ac.ir\">http://eceta.ut.ac.ir</a>", name, "دانشجوی گرامی،<br /> <br /> با سلام<br /> <br /> لیست درس‌های مورد نیاز برای درس «" + (toPersian(courseName)) + "» تغییر کرده است. لطفا در اسرع وقت درخواست خود را ویرایش کنید.<br /> <br /> سامانه مدیریت دستیاران آموزشی<br /> دانشکده مهندسی برق و کامپیوتر<br /> <a href=\"http://eceta.ut.ac.ir\">http://eceta.ut.ac.ir</a>");
        return null;
      },
      requestForAssistantAccepted: function(courseName, chores) {
        var coursesText;
        chores = chores.map(function(chore) {
          return '"' + chore + '"';
        });
        coursesText = '';
        if (chores.length > 0) {
          coursesText += 'برای انجام کار';
          if (chores.length > 1) {
            coursesText += 'وظایف';
          } else {
            coursesText += 'وظیفه';
          }
          coursesText += ' ';
        }
        coursesText += chores.slice(0, -1).join('، ');
        if (chores.length > 1) {
          coursesText += ' و ';
        }
        coursesText += chores.slice(-1);
        if (chores.length > 0) {
          coursesText += ' ';
        }
        sendMail(email, 'درخواست دستیاری شما تایید شد', "دانشجوی گرامی،\n \n با سلام\n \n ضمن تشکر از درخواست شما برای دستیاری درس «" + (toPersian(courseName)) + "»، به اطلاع می‌رساند شما به عنوان دستیار این درس " + coursesText + "انتخاب شده‌اید.\n به منظور هماهنگی با استاد محترم درس به ایشان مراجعه نمایید.\n \n سامانه مدیریت دستیاران آموزشی\n دانشکده مهندسی برق و کامپیوتر\n http://eceta.ut.ac.ir", name, "دانشجوی گرامی،<br /> <br /> با سلام<br /> <br /> ضمن تشکر از درخواست شما برای دستیاری درس «" + (toPersian(courseName)) + "»، به اطلاع می‌رساند شما به عنوان دستیار این درس " + coursesText + "انتخاب شده‌اید.<br /> به منظور هماهنگی با استاد محترم درس به ایشان مراجعه نمایید.<br /> <br /> سامانه مدیریت دستیاران آموزشی<br /> دانشکده مهندسی برق و کامپیوتر<br /> <a href=\"http://eceta.ut.ac.ir\">http://eceta.ut.ac.ir</a>");
        return null;
      },
      requestForAssistantRejected: function(courseName) {
        sendMail(email, 'درخواست دستیاری شما رد شد', "دانشجوی گرامی،\n \n با سلام\n \n ضمن تشکر از درخواست شما برای دستیاری درس «" + (toPersian(courseName)) + "»، به اطلاع می‌رساند متاسفانه شما به عنوان دستیار این درس انتخاب نشدید.\n \n سامانه مدیریت دستیاران آموزشی\n دانشکده مهندسی برق و کامپیوتر\n http://eceta.ut.ac.ir", name, "دانشجوی گرامی،<br /> <br /> با سلام<br /> <br /> ضمن تشکر از درخواست شما برای دستیاری درس «" + (toPersian(courseName)) + "»، به اطلاع می‌رساند متاسفانه شما به عنوان دستیار این درس انتخاب نشدید.<br /> <br /> سامانه مدیریت دستیاران آموزشی<br /> دانشکده مهندسی برق و کامپیوتر<br /> <a href=\"http://eceta.ut.ac.ir\">http://eceta.ut.ac.ir</a>");
        return null;
      }
    };
  };

  config(function(methodName, personId, response, sql, req) {
    if (!personId) {
      return response.loggedOut = true;
    }
  });

  get('loginEmailValid', function(sql, req) {
    var email;
    email = req.query.email;
    return sql.exists('regularLogins', {
      query: 'x0.email = % AND x0."passwordHash" IS NOT NULL',
      values: [email]
    });
  });

  post('cas', function(sql, req) {
    var ticket;
    ticket = req.body.ticket;
    return readFile('../server/chain.crt').then(function(cert) {
      return requestGet({
        url: 'https://auth.ut.ac.ir:8443/cas/serviceValidate?service=http://eceta.ut.ac.ir&ticket=' + ticket,
        rejectUnauthorized: false,
        cert: cert
      });
    }).then(function(arg) {
      var _, body, employeeNumbers, employeeRegex, golestanNumbers, result, studentNumbers, studentRegex;
      _ = arg[0], body = arg[1];
      employeeRegex = /<cas:employeeNumber>.*?<\/cas:employeeNumber>/g;
      employeeNumbers = [];
      while (result = employeeRegex.exec(body)) {
        result = result[0];
        result = result.substr(20, result.length - 41);
        result = JSON.parse(result);
        if (Array.isArray(result)) {
          result.forEach(function(result) {
            return employeeNumbers.push(String(result));
          });
        } else {
          employeeNumbers.push(String(result));
        }
      }
      studentRegex = /<cas:utStudentNumber>.*?<\/cas:utStudentNumber>/g;
      studentNumbers = [];
      while (result = studentRegex.exec(body)) {
        result = result[0];
        result = result.substr(21, result.length - 43);
        result = JSON.parse(result);
        if (Array.isArray(result)) {
          result.forEach(function(result) {
            return studentNumbers.push(String(result));
          });
        } else {
          studentNumbers.push(String(result));
        }
      }
      golestanNumbers = employeeNumbers.concat(studentNumbers);
      return {
        value: golestanNumbers,
        setData: {
          golestanNumbers: golestanNumbers
        }
      };
    });
  });

  post('casLogin', function(sql, req) {
    var golestanNumber, golestanNumbers;
    golestanNumbers = req.data.golestanNumbers;
    golestanNumber = req.body.golestanNumber;
    if (indexOf.call(golestanNumbers, golestanNumber) < 0) {
      throw {
        error: 'not you'
      };
    }
    return sql.select('persons', 'id', {
      golestanNumber: golestanNumber
    }).then(function(arg) {
      var id;
      id = arg[0].id;
      req.personId = id;
      return getPerson(sql, req).then(function(person) {
        return {
          person: person,
          setPersonId: id,
          setData: {}
        };
      });
    });
  });

  post('verify', function(sql, req) {
    var email, ref1, verificationCode;
    ref1 = req.body, email = ref1.email, verificationCode = ref1.verificationCode;
    return sql.update('regularLogins', {}, {
      email: email,
      verificationCode: verificationCode
    }, 'personId').then(function(regularLogins) {
      if (regularLogins.length) {
        req.personId = regularLogins[0].personId;
        return getPerson(sql, req).then(function(person) {
          return {
            person: person,
            setPersonId: regularLogins[0].personId
          };
        });
      }
    });
  });

  post('ping', function(sql, req) {
    return sql.select('persons', ['type'], {
      id: req.personId
    }).then(function(arg) {
      var Qs, person;
      person = arg[0];
      if (!person) {
        return null;
      }
      convert.nubmerTypeToStringType(person);
      Qs = {};
      Qs['person'] = getPerson(sql, req);
      Qs['courses'] = getCourses(sql, req);
      if (person.type === 'کارشناس آموزش') {
        Qs['permissions'] = getPermissions(sql, req);
        Qs['roles'] = getRoles(sql, req);
        Qs['persons'] = getPersons(sql, req);
        Qs['requestForAssistants'] = getRequestForAssistants(sql, req);
      }
      if (person.type === 'دانشجو') {
        Qs['professors'] = getProfessors(sql, req);
        Qs['requestForAssistants'] = getStudentRequestForAssistants(sql, req);
      }
      if (person.type === 'استاد' || person.type === 'نماینده استاد') {
        Qs['chores'] = getChores(sql, req);
        Qs['offerings'] = getProfessorOfferings(sql, req);
      }
      if (person.type === 'کارشناس آموزش' || person.type === 'دانشجو') {
        Qs['currentTerm'] = getCurrentTerm(sql, req);
        Qs['offerings'] = getOfferings(sql, req);
      }
      return all(Object.keys(Qs).map(function(name) {
        return Qs[name];
      })).then(function(data) {
        return Object.keys(Qs).reduce((function(response, name, i) {
          if (data[i]) {
            response[name] = data[i];
          }
          return response;
        }), {});
      });
    });
  });

  getPerson = function(sql, req) {
    return sql.select('persons', ['id', 'fullName', 'email', 'golestanNumber', 'type'], {
      id: req.personId
    }).then(function(arg) {
      var extrasQ, permissionsFromRolesQ, permissionsQ, person;
      person = arg[0];
      if (!person) {
        return;
      }
      extrasQ = (function() {
        switch (person.type) {
          case 'دانشجو':
            return sql.select('students', 'degree', {
              id: person.id
            }).then(function(arg1) {
              var extras;
              extras = arg1[0];
              extend(person, extras);
              return convert.numberDegreeToStringDegree(person);
            });
        }
      })();
      convert.nubmerTypeToStringType(person);
      person.flattenedPermissions = [];
      permissionsQ = sql.select(['permissions', 'personPermissions'], ['id'], {
        query: 'x0.id = x1."permissionId" AND x1."personId" = %',
        values: [person.id]
      }).then(function(permissions) {
        return person.flattenedPermissions = person.flattenedPermissions.concat(permissions.map(function(arg1) {
          var id;
          id = arg1.id;
          return id;
        }));
      });
      permissionsFromRolesQ = sql.select(['permissions', 'rolePermissions', 'personRoles'], ['id'], {
        query: 'x0.id = x1."permissionId" AND x1."roleId" = x2."roleId" AND x2."personId" = %',
        values: [person.id]
      }).then(function(permissions) {
        return person.flattenedPermissions = person.flattenedPermissions.concat(permissions.map(function(arg1) {
          var id;
          id = arg1.id;
          return id;
        }));
      });
      return all([extrasQ, permissionsQ, permissionsFromRolesQ]).then(function() {
        delete person.id;
        return person;
      });
    });
  };

  post('getPerson', function(sql, req) {
    return getPerson(sql, req).then(function(person) {
      return {
        person: person
      };
    });
  });

  getPermissions = function(sql, req) {
    return sql.select('permissions', ['id', 'name', 'persianName', 'description', 'persianDescription']);
  };

  post('getPermissions', function(sql, req) {
    return getPermissions(sql, req).then(function(permissions) {
      return {
        permissions: permissions
      };
    });
  });

  getRoles = function(sql, req) {
    return sql.select('roles', ['id', 'name', 'persianName', 'description', 'persianDescription']).then(function(roles) {
      return all(roles.map(function(role) {
        return sql.select('rolePermissions', 'permissionId', {
          roleId: role.id
        }).then(function(permissions) {
          return extend(role, {
            permissions: permissions.map(function(arg) {
              var permissionId;
              permissionId = arg.permissionId;
              return permissionId;
            })
          });
        });
      }));
    });
  };

  post('getRoles', function(sql, req) {
    return getRoles(sql, req).then(function(roles) {
      return {
        roles: roles
      };
    });
  });

  getPersons = function(sql, req) {
    return sql.select('persons', ['id', 'fullName', 'email', 'golestanNumber', 'type']).then(function(persons) {
      return all(persons.map(function(person) {
        var extrasQ, regularLoginQ;
        convert.nubmerTypeToStringType(person);
        extrasQ = (function() {
          switch (person.type) {
            case 'دانشجو':
              return sql.select('students', 'degree', {
                id: person.id
              }).then(function(arg) {
                var extras;
                extras = arg[0];
                extend(person, extras);
                return convert.numberDegreeToStringDegree(person);
              });
          }
        })();
        person.canLoginWithEmail = person.hasPassword = false;
        regularLoginQ = sql.select('regularLogins', ['email', 'passwordHash'], {
          personId: person.id
        }).then(function(arg) {
          var regularLogin;
          regularLogin = arg[0];
          if (regularLogin) {
            person.canLoginWithEmail = regularLogin.email === person.email;
            return person.hasPassword = !!regularLogin.passwordHash;
          }
        });
        return all([extrasQ, regularLoginQ]).then(function() {
          return person;
        });
      }));
    });
  };

  post('getPersons', function(sql, req) {
    return getPersons(sql, req).then(function(persons) {
      return {
        persons: persons
      };
    });
  });

  getProfessors = function(sql, req) {
    return sql.select('persons', ['id', 'fullName'], {
      type: 1
    });
  };

  post('getProfessors', function(sql, req) {
    return getProfessors(sql, req).then(function(professors) {
      return {
        professors: professors
      };
    });
  });

  getStudentRequestForAssistants = function(sql, req) {
    return sql.select('staticData', 'value', {
      key: 'currentTerm'
    }).then(function(arg) {
      var currentTerm;
      currentTerm = arg[0].value;
      return sql.select(['requestForAssistants', 'offerings'], [['id', 'status', 'isTrained', 'message', 'offeringId', 'studentId', 'gpa']], {
        query: 'x0."studentId" = % AND x0."offeringId" = x1.id AND x1."termId" = %',
        values: [req.personId, currentTerm]
      });
    }).then(function(requestForAssistants) {
      return all(requestForAssistants.map(function(requestForAssistant) {
        requestForAssistant.isTrained = !!requestForAssistant.isTrained;
        convert.numberStatusToStringStatus(requestForAssistant);
        return sql.select('grades', ['courseId', 'grade'], {
          requestForAssistantId: requestForAssistant.id
        }).then(function(grades) {
          return extend(requestForAssistant, {
            grades: grades
          });
        });
      }));
    });
  };

  post('getStudentRequestForAssistants', function(sql, req) {
    return getStudentRequestForAssistants(sql, req).then(function(requestForAssistants) {
      return {
        requestForAssistants: requestForAssistants
      };
    });
  });

  getChores = function(sql, req) {
    return sql.select('chores', ['id', 'name', 'persianName', 'description', 'persianDescription']);
  };

  post('getChores', function(sql, req) {
    return getChores(sql, req).then(function(chores) {
      return {
        chores: chores
      };
    });
  });

  getProfessorOfferings = function(sql, req) {
    return sql.select('persons', ['id', 'type'], {
      id: req.personId
    }).then(function(arg) {
      var person;
      person = arg[0];
      if (!person) {
        return null;
      }
      convert.nubmerTypeToStringType(person);
      return sql.select('staticData', 'value', {
        key: 'currentTerm'
      }).then(function(arg1) {
        var currentTerm;
        currentTerm = arg1[0].value;
        return sql.select('offerings', ['id', 'capacity', 'isClosed', 'courseId'], extend({
          termId: currentTerm
        }, (person.type === 'استاد' ? {
          professorId: person.id
        } : {
          deputyId: person.id
        })));
      }).then(function(offerings) {
        return all(offerings.map(function(offering) {
          offering.isClosed = !!offering.isClosed;
          sql.select('requiredCourses', 'courseId', {
            offeringId: offering.id
          }).then(function(requiredCourses) {
            return extend(offering, {
              requiredCourses: requiredCourses.map(function(arg1) {
                var courseId;
                courseId = arg1.courseId;
                return courseId;
              })
            });
          });
          return sql.select(['requestForAssistants', 'persons', 'students'], [['id', 'gpa', 'isTrained', 'message', 'status', 'isChiefTA', 'studentId'], ['fullName', 'email'], ['degree']], {
            query: 'x0."studentId" = x1.id AND x1.id = x2.id AND x0."offeringId" = %',
            values: [offering.id]
          }).then(function(requestForAssistants) {
            extend(offering, {
              requestForAssistants: requestForAssistants
            });
            return all(requestForAssistants.map(function(requestForAssistant) {
              requestForAssistant.isTrained = !!requestForAssistant.isTrained;
              requestForAssistant.isChiefTA = !!requestForAssistant.isChiefTA;
              convert.numberStatusToStringStatus(requestForAssistant);
              convert.numberDegreeToStringDegree(requestForAssistant);
              return all([
                sql.select('grades', ['courseId', 'grade'], {
                  requestForAssistantId: requestForAssistant.id
                }).then(function(grades) {
                  return extend(requestForAssistant, {
                    grades: grades
                  });
                }), sql.select('assistantChores', ['choreId'], {
                  requestForAssistantId: requestForAssistant.id
                }).then(function(chores) {
                  chores = chores.map(function(arg1) {
                    var choreId;
                    choreId = arg1.choreId;
                    return choreId;
                  });
                  return extend(requestForAssistant, {
                    chores: chores
                  });
                })
              ]);
            }));
          });
        })).then(function() {
          return offerings;
        });
      });
    });
  };

  post('getProfessorOfferings', function(sql, req) {
    return getProfessorOfferings(sql, req).then(function(offerings) {
      return {
        offerings: offerings
      };
    });
  });

  getCurrentTerm = function(sql, req) {
    return sql.select('staticData', 'value', {
      key: 'currentTerm'
    }).then(function(arg) {
      var currentTerm;
      currentTerm = arg[0].value;
      return currentTerm;
    });
  };

  post('getCurrentTerm', function(sql, req) {
    return getCurrentTerm(sql, req).then(function(currentTerm) {
      return {
        currentTerm: currentTerm
      };
    });
  });

  getOfferings = function(sql, req) {
    return sql.select('offerings', ['id', 'capacity', 'isClosed', 'professorId', 'courseId', 'termId', 'deputyId']).then(function(offerings) {
      return all(offerings.map(function(offering) {
        offering.isClosed = !!offering.isClosed;
        return sql.select('requiredCourses', 'courseId', {
          offeringId: offering.id
        }).then(function(requiredCourses) {
          offering.requiredCourses = requiredCourses.map(function(arg) {
            var courseId;
            courseId = arg.courseId;
            return courseId;
          });
          return offering;
        });
      }));
    });
  };

  post('getOfferings', function(sql, req) {
    return getOfferings(sql, req).then(function(offerings) {
      return {
        offerings: offerings
      };
    });
  });

  getCourses = function(sql, req) {
    return sql.select('courses', ['id', 'name', 'number']);
  };

  post('getCourses', function(sql, req) {
    return getCourses(sql, req).then(function(courses) {
      return {
        courses: courses
      };
    });
  });

  getRequestForAssistants = function(sql, req) {
    return sql.select('requestForAssistants', ['id', 'status', 'isTrained', 'message', 'offeringId', 'studentId', 'gpa', 'isChiefTA']).then(function(requestForAssistants) {
      return all(requestForAssistants.map(function(requestForAssistant) {
        requestForAssistant.isTrained = !!requestForAssistant.isTrained;
        requestForAssistant.isChiefTA = !!requestForAssistant.isChiefTA;
        convert.numberStatusToStringStatus(requestForAssistant);
        return sql.select('grades', ['courseId', 'grade'], {
          requestForAssistantId: requestForAssistant.id
        }).then(function(grades) {
          return extend(requestForAssistant, {
            grades: grades
          });
        });
      }));
    });
  };

  post('getRequestForAssistants', function(sql, req) {
    return getRequestForAssistants(sql, req).then(function(requestForAssistants) {
      return {
        requestForAssistants: requestForAssistants
      };
    });
  });

  post('register', function(sql, req) {
    var email, password, passwordHash, ref1, verificationCode;
    ref1 = req.body, email = ref1.email, password = ref1.password, verificationCode = ref1.verificationCode;
    passwordHash = hash(password);
    return sql.update('regularLogins', {
      passwordHash: passwordHash,
      verificationCode: null
    }, {
      email: email,
      verificationCode: verificationCode
    }, 'personId').then(function(regularLogins) {
      if (regularLogins.length) {
        req.personId = regularLogins[0].personId;
        return getPerson(sql, req).then(function(person) {
          return {
            person: person,
            setPersonId: regularLogins[0].personId
          };
        });
      }
    });
  });

  post('login', function(sql, req) {
    var email, password, passwordHash, ref1;
    ref1 = req.body, email = ref1.email, password = ref1.password;
    passwordHash = hash(password);
    return sql.select('regularLogins', ['id', 'email', 'personId'], {
      query: 'x0.email = % AND x0."passwordHash" = %',
      values: [email, passwordHash]
    }).then(function(arg) {
      var regularLogin;
      regularLogin = arg[0];
      if (regularLogin == null) {
        throw 'wrong';
      }
      req.personId = regularLogin.personId;
      return getPerson(sql, req).then(function(person) {
        return {
          person: person,
          setPersonId: regularLogin.personId
        };
      });
    });
  });

  post('changeEmail', function(sql, req) {
    var email;
    email = req.body.email;
    return all([
      sql.update('persons', {
        email: email
      }, {
        id: req.personId
      }), sql.update('regularLogins', {
        email: email
      }, {
        personId: req.personId
      })
    ]).then(function() {
      return null;
    });
  });

  post('setStaticData', function(sql, req) {
    return all(req.body.map(function(arg) {
      var key, value;
      key = arg.key, value = arg.value;
      return sql.update('staticData', {
        value: value
      }, {
        key: key
      });
    })).then(function() {
      return null;
    });
  });

  post('createPerson', function(sql, req) {
    var canLoginWithEmail, email, fullName, golestanNumber, ref1, type;
    ref1 = req.body, fullName = ref1.fullName, email = ref1.email, canLoginWithEmail = ref1.canLoginWithEmail, golestanNumber = ref1.golestanNumber, type = ref1.type;
    return sql.insert('persons', convert.stringTypeToNumberType({
      fullName: fullName,
      email: email,
      golestanNumber: golestanNumber,
      type: type
    }), true)["catch"](function(err) {
      if (~err.detail.indexOf('email')) {
        throw 'email';
      } else {
        throw 'golestanNumber';
      }
    }).then(function(personId) {
      var degree, extrasQ, regularLoginQ, roleQ;
      regularLoginQ = Q().then(function() {
        var verificationCode;
        if (!(canLoginWithEmail && email)) {
          return;
        }
        verificationCode = randomString(16);
        return sql.insert('regularLogins', {
          personId: personId,
          email: email,
          verificationCode: verificationCode
        }).then(function() {
          return sendEmail(email, fullName).register(email, verificationCode);
        })["catch"](function(err) {
          throw 'email';
        });
      });
      extrasQ = (function() {
        switch (type) {
          case 'کارشناس آموزش':
            return sql.insert('admins', {
              id: personId
            });
          case 'استاد':
            return sql.insert('professors', {
              id: personId
            });
          case 'دانشجو':
            degree = convert.stringDegreeToNumberDegree(req.body).degree;
            return sql.insert('students', {
              degree: degree,
              id: personId
            });
          case 'نماینده استاد':
            return sql.insert('deputies', {
              id: personId
            });
        }
      })();
      roleQ = (function() {
        switch (type) {
          case 'کارشناس آموزش':
            return sql.insert('personRoles', {
              personId: personId,
              roleId: 1
            });
          case 'استاد':
            return sql.insert('personRoles', {
              personId: personId,
              roleId: 2
            });
          case 'دانشجو':
            return sql.insert('personRoles', {
              personId: personId,
              roleId: 3
            });
          case 'نماینده استاد':
            return sql.insert('personRoles', {
              personId: personId,
              roleId: 4
            });
        }
      })();
      return all([regularLoginQ, extrasQ, roleQ]).then(function() {
        return personId;
      });
    })["catch"](function(error) {
      if (error === 'golestanNumber' || error === 'email') {
        throw {
          error: error
        };
      } else {
        throw error;
      }
    });
  });

  post('updatePerson', function(sql, req) {
    var canLoginWithEmail, email, fullName, golestanNumber, personId, personQ, ref1, regularLoginQ;
    ref1 = req.body, fullName = ref1.fullName, email = ref1.email, canLoginWithEmail = ref1.canLoginWithEmail, golestanNumber = ref1.golestanNumber;
    personId = req.body.id;
    personQ = sql.update('persons', {
      fullName: fullName,
      email: email,
      golestanNumber: golestanNumber
    }, {
      id: personId
    }, 'type').then(function(arg) {
      var degree, type;
      type = arg[0].type;
      type = convert.nubmerTypeToStringType({
        type: type
      }).type;
      switch (type) {
        case 'دانشجو':
          degree = convert.stringDegreeToNumberDegree(req.body).degree;
          return sql.update('students', {
            degree: degree
          }, {
            id: personId
          });
      }
    })["catch"](function(err) {
      if (~err.detail.indexOf('email')) {
        throw 'email';
      } else {
        throw 'golestanNumber';
      }
    });
    regularLoginQ = canLoginWithEmail && email ? sql.select('regularLogins', ['email', 'passwordHash'], {
      personId: personId
    }).then(function(arg) {
      var regularLogin, verificationCode;
      regularLogin = arg[0];
      if (regularLogin) {
        if (regularLogin.email !== email) {
          verificationCode = randomString(16);
          return sql.update('regularLogins', {
            email: email,
            verificationCode: verificationCode
          }, {
            personId: personId
          }).then(function() {
            return sendEmail(email, fullName).register(email, verificationCode);
          })["catch"](function(err) {
            throw 'email';
          });
        }
      } else {
        verificationCode = randomString(16);
        return sql.insert('regularLogins', {
          personId: personId,
          email: email,
          verificationCode: verificationCode
        }).then(function() {
          return sendEmail(email, fullName).register(email, verificationCode);
        })["catch"](function(err) {
          throw 'email';
        });
      }
    }) : sql["delete"]('regularLogins', {
      personId: personId
    });
    return all([personQ, regularLoginQ]).then(function() {
      return null;
    })["catch"](function(error) {
      if (error === 'golestanNumber' || error === 'email') {
        throw {
          error: error
        };
      } else {
        throw error;
      }
    });
  });

  post('deletePersons', function(sql, req) {
    var ids;
    ids = req.body.ids;
    return all(ids.map(function(id) {
      return sql["delete"]('persons', {
        id: id
      });
    })).then(function() {
      return null;
    });
  });

  post('resetPassword', function(sql, req) {
    var personId, verificationCode;
    personId = req.body.personId;
    verificationCode = randomString(16);
    return all([
      sql.update('regularLogins', {
        verificationCode: verificationCode
      }, {
        personId: personId
      }), sql.select('persons', ['fullName', 'email'], {
        id: personId
      }).then(function(arg) {
        var email, fullName, ref1;
        ref1 = arg[0], fullName = ref1.fullName, email = ref1.email;
        sendEmail(email, fullName).register(email, verificationCode);
        return null;
      })
    ]);
  });

  post('createRole', function(sql, req) {
    return sql.insert('roles', req.body, true).then(function(roleId) {
      return roleId;
    });
  });

  post('updateRole', function(sql, req) {
    var id;
    id = req.body.id;
    delete req.body.id;
    return sql.update('roles', req.body, {
      id: id
    }).then(function() {
      return null;
    });
  });

  post('deleteRoles', function(sql, req) {
    var ids;
    ids = req.body.ids;
    return all(ids.map(function(id) {
      return sql["delete"]('roles', {
        id: id
      });
    })).then(function() {
      return null;
    });
  });

  post('createCourse', function(sql, req) {
    return sql.insert('courses', req.body, true).then(function(courseId) {
      return courseId;
    });
  });

  post('updateCourse', function(sql, req) {
    var id;
    id = req.body.id;
    delete req.body.id;
    return sql.update('courses', req.body, {
      id: id
    }).then(function() {
      return null;
    });
  });

  post('deleteCourses', function(sql, req) {
    var ids;
    ids = req.body.ids;
    return all(ids.map(function(id) {
      return sql["delete"]('courses', {
        id: id
      });
    })).then(function() {
      return null;
    });
  });

  post('createTerm', function(sql, req) {
    var half, id, ref1, year;
    ref1 = req.body, year = ref1.year, half = ref1.half;
    id = year + "-" + half;
    return sql.insert('terms', {
      id: id,
      year: year,
      half: half
    }, true).then(function(termId) {
      return termId;
    });
  });

  post('deleteTerms', function(sql, req) {
    var ids;
    ids = req.body.ids;
    return all(ids.map(function(id) {
      return sql["delete"]('terms', {
        id: id
      });
    })).then(function() {
      return null;
    });
  });

  post('createOffering', function(sql, req) {
    return sql.insert('offerings', req.body, true).then(function(offeringId) {
      return offeringId;
    });
  });

  post('updateOffering', function(sql, req) {
    var id;
    id = req.body.id;
    delete req.body.id;
    return sql.update('offerings', req.body, {
      id: id
    }).then(function() {
      return null;
    });
  });

  post('deleteOfferings', function(sql, req) {
    var ids;
    ids = req.body.ids;
    return all(ids.map(function(id) {
      return sql["delete"]('offerings', {
        id: id
      });
    })).then(function() {
      return null;
    });
  });

  post('updateRequestForAssistant', function(sql, req) {
    var gpa, grades, id, isTrained, message, ref1, requestForAssistantId;
    ref1 = req.body, id = ref1.id, gpa = ref1.gpa, message = ref1.message, isTrained = ref1.isTrained, grades = ref1.grades;
    isTrained = +isTrained;
    requestForAssistantId = id;
    return all([
      sql.update('requestForAssistants', {
        gpa: gpa,
        message: message,
        isTrained: isTrained
      }, {
        id: id
      }), all(grades.map(function(arg) {
        var courseId, grade;
        courseId = arg.courseId, grade = arg.grade;
        if (!grade) {
          return sql["delete"]('grades', {
            requestForAssistantId: requestForAssistantId,
            courseId: courseId
          });
        } else {
          return sql.exists('grades', {
            requestForAssistantId: requestForAssistantId,
            courseId: courseId
          }).then(function(exists) {
            if (exists) {
              return sql.update('grades', {
                grade: grade
              }, {
                requestForAssistantId: requestForAssistantId,
                courseId: courseId
              });
            } else {
              return sql.insert('grades', {
                requestForAssistantId: requestForAssistantId,
                courseId: courseId,
                grade: grade
              });
            }
          });
        }
      }))
    ]).then(function() {
      return null;
    });
  });

  post('sendRequestForAssistant', function(sql, req) {
    var gpa, grades, isTrained, message, offeringId, ref1, studentId;
    studentId = req.personId;
    if (!studentId) {
      return {
        error: 'loggedOut',
        loggedOut: true
      };
    }
    ref1 = req.body, offeringId = ref1.offeringId, message = ref1.message, gpa = ref1.gpa, grades = ref1.grades, isTrained = ref1.isTrained;
    isTrained = +isTrained;
    return sql["delete"]('requestForAssistants', {
      studentId: studentId,
      offeringId: offeringId
    }).then(function() {
      return sql.insert('requestForAssistants', {
        studentId: studentId,
        offeringId: offeringId,
        message: message,
        gpa: gpa,
        isTrained: isTrained
      }, true);
    }).then(function(requestForAssistantId) {
      all(grades.map(function(arg) {
        var courseId, grade;
        courseId = arg.courseId, grade = arg.grade;
        return sql.insert('grades', {
          requestForAssistantId: requestForAssistantId,
          courseId: courseId,
          grade: grade
        });
      })).then(function() {
        return all([
          sql.select('persons', ['fullName', 'email'], {
            id: req.personId
          }).then(function(arg) {
            var person;
            person = arg[0];
            return person;
          }), sql.select('offerings', 'courseId', {
            id: offeringId
          }).then(function(arg) {
            var courseId;
            courseId = arg[0].courseId;
            return sql.select('courses', 'name', {
              id: courseId
            }).then(function(arg1) {
              var name;
              name = arg1[0].name;
              return name;
            });
          })
        ]).then(function(arg) {
          var courseName, email, fullName, ref2;
          (ref2 = arg[0], fullName = ref2.fullName, email = ref2.email), courseName = arg[1];
          return sendEmail(email, fullName).requestForAssistantSent(courseName);
        });
      });
      return requestForAssistantId;
    });
  });

  post('deleteRequestForAssistants', function(sql, req) {
    var ids;
    ids = req.body.ids;
    return all(ids.map(function(id) {
      return sql["delete"]('requestForAssistants', {
        id: id
      });
    })).then(function() {
      return null;
    });
  });

  sendOfferingCoursesChangedEmail = function(sql, offeringId) {
    return all([
      sql.select('offerings', 'courseId', {
        id: offeringId
      }).then(function(arg) {
        var courseId;
        courseId = arg[0].courseId;
        return sql.select('courses', 'name', {
          id: courseId
        }).then(function(arg1) {
          var name;
          name = arg1[0].name;
          return name;
        });
      }), sql.select('requestForAssistants', 'studentId', {
        offeringId: offeringId
      }).then(function(requestForAssistants) {
        return all(requestForAssistants.map(function(arg) {
          var studentId;
          studentId = arg.studentId;
          return sql.select('persons', ['fullName', 'email'], {
            id: studentId
          }).then(function(arg1) {
            var student;
            student = arg1[0];
            return student;
          });
        }));
      })
    ]).then(function(arg) {
      var courseName, students;
      courseName = arg[0], students = arg[1];
      return all(students.map(function(arg1) {
        var email, fullName;
        fullName = arg1.fullName, email = arg1.email;
        return sendEmail(email, fullName).offeringCoursesChanged(courseName);
      }));
    });
  };

  post('addRequiredCourse', function(sql, req) {
    var courseId, offeringId, ref1;
    ref1 = req.body, offeringId = ref1.offeringId, courseId = ref1.courseId;
    return sql.insert('requiredCourses', {
      offeringId: offeringId,
      courseId: courseId
    }).then(function() {
      return sendOfferingCoursesChangedEmail(sql, offeringId);
    }).then(function() {
      return null;
    });
  });

  post('removeRequiredCourse', function(sql, req) {
    var courseId, offeringId, ref1;
    ref1 = req.body, offeringId = ref1.offeringId, courseId = ref1.courseId;
    return sql["delete"]('requiredCourses', {
      offeringId: offeringId,
      courseId: courseId
    }).then(function() {
      return sendOfferingCoursesChangedEmail(sql, offeringId);
    }).then(function() {
      return null;
    });
  });

  post('changeRequestForAssistant', function(sql, req) {
    var choreIds, id, isChiefTA, ref1, status;
    ref1 = convert.stringStatusToNumberStatus(req.body), id = ref1.id, status = ref1.status, isChiefTA = ref1.isChiefTA, choreIds = ref1.choreIds;
    isChiefTA = +isChiefTA;
    return all([
      sql.update('requestForAssistants', {
        status: status,
        isChiefTA: isChiefTA
      }, {
        id: id
      }), sql["delete"]('assistantChores', {
        requestForAssistantId: id
      }).then(function() {
        if (status === 2) {
          return all(choreIds.map(function(choreId) {
            return sql.insert('assistantChores', {
              choreId: choreId,
              requestForAssistantId: id
            });
          }));
        }
      })
    ]).then(function() {
      return null;
    });
  });

  post('closeOffering', function(sql, req) {
    var id;
    id = req.body.id;
    return all([
      sql.update('offerings', {
        isClosed: 1
      }, {
        id: id
      }, 'courseId').then(function(arg) {
        var courseId;
        courseId = arg[0].courseId;
        return sql.select('courses', 'name', {
          id: courseId
        }).then(function(arg1) {
          var name;
          name = arg1[0].name;
          return name;
        });
      }), sql.select('requestForAssistants', ['id', 'studentId', 'status'], {
        offeringId: id
      }).then(function(requestForAssistants) {
        return all(requestForAssistants.map(function(requestForAssistant) {
          var ref1, status, studentId;
          ref1 = convert.numberStatusToStringStatus(requestForAssistant), studentId = ref1.studentId, status = ref1.status;
          return sql.select('persons', ['fullName', 'email'], {
            id: studentId
          }).then(function(arg) {
            var student;
            student = arg[0];
            return {
              student: student,
              status: status,
              requestForAssistantId: requestForAssistant.id
            };
          });
        }));
      })
    ]).then(function(arg) {
      var courseName, students;
      courseName = arg[0], students = arg[1];
      return all(students.map(function(arg1) {
        var email, fullName, ref1, requestForAssistantId, status;
        requestForAssistantId = arg1.requestForAssistantId, status = arg1.status, (ref1 = arg1.student, fullName = ref1.fullName, email = ref1.email);
        switch (status) {
          case 'تایید شده':
            return sql.select('assistantChores', 'choreId', {
              requestForAssistantId: requestForAssistantId
            }).then(function(chores) {
              return all(chores.map(function(arg2) {
                var choreId;
                choreId = arg2.choreId;
                return sql.select('chores', 'persianName', {
                  id: choreId
                }).then(function(arg3) {
                  var persianName;
                  persianName = arg3[0].persianName;
                  return persianName;
                });
              }));
            }).then(function(choreNames) {
              return sendEmail(email, fullName).requestForAssistantAccepted(courseName, choreNames);
            });
          case 'رد شده':
            return sendEmail(email, fullName).requestForAssistantRejected(courseName);
        }
      }));
    }).then(function() {
      return null;
    });
  });

  post('batchAddOfferings', function(sql, req) {
    var data, entries;
    data = req.body.data;
    entries = data.split('\n');
    entries.splice(0, 1);
    entries.splice(entries.length - 1, 1);
    return all(entries.map(function(entry) {
      entry = entry.split('\t').map(function(x) {
        return x.trim();
      });
      return all([
        sql.select('courses', 'id', {
          number: entry[9].split('-')[1]
        }), sql.select(['professors', 'persons'], ['id'], {
          query: 'x0.id = x1.id AND x1."golestanNumber" = %',
          values: [entry[4]]
        })
      ]).then(function(arg) {
        var courseId, professorId, ref1, ref2, ref3, ref4;
        (ref1 = arg[0], (ref2 = ref1[0], courseId = ref2.id)), (ref3 = arg[1], (ref4 = ref3[0], professorId = ref4.id));
        return sql.insert('offerings', {
          courseId: courseId,
          professorId: professorId,
          capacity: entry[14]
        });
      });
    })).then(function() {
      return null;
    });
  });

  post('sendEmail', function(sql, req) {
    var ids, message, ref1, title;
    ref1 = req.body, ids = ref1.ids, title = ref1.title, message = ref1.message;
    ids.forEach(function(id) {
      return sql.select('persons', ['fullName', 'email'], {
        id: id
      }).then(function(arg) {
        var email, fullName, ref2;
        ref2 = arg[0], fullName = ref2.fullName, email = ref2.email;
        if (email) {
          return sendMail(email, title, message + "\n \n سامانه مدیریت دستیاران آموزشی\n دانشکده مهندسی برق و کامپیوتر\n http://eceta.ut.ac.ir", fullName);
        }
      });
    });
    return null;
  });

  get('paymentStudents.xlsx', function(sql, req) {
    return sql.select(['persons', 'students', 'courses', 'persons', 'requestForAssistants', 'offerings'], [
      ['fullName', 'golestanNumber'], ['degree'], {
        courseName: 'name',
        courseNumber: 'number'
      }, {
        professorName: 'fullName',
        professorGolestanNumber: 'golestanNumber'
      }, ['isChiefTA', 'isTrained'], ['termId']
    ], 'x0.id = x4."studentId" AND x4."offeringId" = x5.id AND x4.status = 2 AND x0.id = x1.id AND x5."courseId" = x2.id AND x5."professorId" = x3.id').then(function(data) {
      return {
        xlsx: [['نام کامل دانشجو', 'شماره دانشجویی', 'نام درس', 'شماره درس', 'نام کامل استاد', 'شماره پرسنلی استاد', 'ترم', 'مقطع', 'دستیار اصلی است', 'در کارگاه آموزش دستیاران شدرکت کرده است']].concat(data.map(function(data) {
          var courseName, courseNumber, degree, fullName, golestanNumber, isChiefTA, isTrained, professorGolestanNumber, professorName, termId;
          convert.numberDegreeToStringDegree(data);
          fullName = data.fullName, golestanNumber = data.golestanNumber, courseName = data.courseName, courseNumber = data.courseNumber, professorName = data.professorName, professorGolestanNumber = data.professorGolestanNumber, termId = data.termId, degree = data.degree, isChiefTA = data.isChiefTA, isTrained = data.isTrained;
          if (isChiefTA) {
            isChiefTA = 'بله';
          } else {
            isChiefTA = 'خیر';
          }
          if (isTrained) {
            isTrained = 'بله';
          } else {
            isTrained = 'خیر';
          }
          return [fullName, golestanNumber, courseName, courseNumber, professorName, professorGolestanNumber, toPersian(termId), degree, isChiefTA, isTrained];
        }))
      };
    });
  });

  get('notTrainedStudents.xlsx', function(sql, req) {
    return sql.select(['persons', 'students', 'offerings', 'requestForAssistants'], [['fullName', 'golestanNumber', 'email'], ['degree'], ['termId']], 'x0.id = x1.id AND x0.id = x3."studentId" AND x2.id = x3."offeringId" AND x3.status = 2 AND x3."isTrained" = 0').then(function(data) {
      return {
        xlsx: [['نام کامل دانشجو', 'شماره دانشجویی', 'ترم', 'ایمیل', 'مقطع']].concat(data.map(function(data) {
          var degree, email, fullName, golestanNumber, termId;
          convert.numberDegreeToStringDegree(data);
          fullName = data.fullName, golestanNumber = data.golestanNumber, termId = data.termId, email = data.email, degree = data.degree;
          return [fullName, golestanNumber, toPersian(termId), email, degree];
        }))
      };
    });
  });

}).call(this);
